name: 🚀 Buildpacks Multi-Architecture Demo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: jjbustamante/kdc

jobs:
  # Test locally first
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test bcrypt functionality
        run: |
          python -c "
          import bcrypt
          import platform
          print(f'✅ bcrypt working on {platform.machine()}')
          password = b'test_password'
          hashed = bcrypt.hashpw(password, bcrypt.gensalt())
          assert bcrypt.checkpw(password, hashed)
          print('✅ bcrypt hash/verify working correctly')
          "

      - name: Test Flask app
        run: |
          python app.py &
          APP_PID=$!
          sleep 3
          
          # Test endpoints
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/health || exit 1
          
          echo "✅ Flask app working correctly"
          kill $APP_PID

  # Build with buildpacks for AMD64
  build-amd64:
    name: 🏗️ Build AMD64 with Buildpacks
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.9.3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build with Buildpacks (AMD64)
        run: |
          pack build ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64 \
            --builder heroku/builder:24 \
            --publish

      - name: Test built image
        run: |
          docker run --rm -p 5000:5000 -d --name test-app \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64
          
          sleep 5
          
          # Test that the app works and shows correct architecture
          response=$(curl -s http://localhost:5000/)
          echo "Response: $response"
          
          if echo "$response" | grep -q "x86_64"; then
            echo "✅ AMD64 architecture detected correctly"
          else
            echo "❌ Architecture detection failed"
            exit 1
          fi
          
          # Test bcrypt functionality
          hash_response=$(curl -s -X POST http://localhost:5000/hash \
            -H "Content-Type: application/json" \
            -d '{"password": "test123"}')
          
          if echo "$hash_response" | grep -q "bcrypt_working.*true"; then
            echo "✅ bcrypt working in container"
          else
            echo "❌ bcrypt not working"
            exit 1
          fi
          
          docker stop test-app

  # Build with buildpacks for ARM64
  build-arm64:
    name: 🏗️ Build ARM64 with Buildpacks  
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.9.3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build with Buildpacks (ARM64)
        run: |
          pack build ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64 \
            --builder heroku/builder:24 \
            --publish

      - name: Test ARM64 image (emulated)
        run: |
          docker run --rm -p 5000:5000 -d --name test-app-arm64 \
            --platform linux/arm64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64
          
          sleep 10  # ARM64 emulation is slower
          
          # Test that the app works 
          response=$(curl -s http://localhost:5000/ || echo "failed")
          echo "Response: $response"
          
          if echo "$response" | grep -q "aarch64"; then
            echo "✅ ARM64 architecture detected correctly"
          else
            echo "⚠️  Architecture detection may vary in emulation"
          fi
          
          # Test basic functionality
          health_response=$(curl -s http://localhost:5000/health || echo "failed")
          if echo "$health_response" | grep -q "healthy"; then
            echo "✅ ARM64 image working in emulation"
          else
            echo "❌ ARM64 image health check failed"
            exit 1
          fi
          
          docker stop test-app-arm64

  # Create multi-arch manifest
  create-manifest:
    name: 📦 Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create \
            ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:amd64 \
            ${{ env.IMAGE_NAME }}:arm64

          docker manifest annotate \
            ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:amd64 \
            --arch amd64

          docker manifest annotate \
            ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:arm64 \
            --arch arm64

          docker manifest push ${{ env.IMAGE_NAME }}:latest

      - name: Output summary
        run: |
          echo "## 🚀 Buildpacks Multi-Architecture Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **AMD64 Image**: \`${{ env.IMAGE_NAME }}:amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "✅ **ARM64 Image**: \`${{ env.IMAGE_NAME }}:arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Multi-Arch**: \`${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Benefits Demonstrated:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔥 **Zero Dockerfile complexity** for native dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Automatic bcrypt compilation** for both architectures" >> $GITHUB_STEP_SUMMARY
          echo "- 🛠️ **Buildpacks handled** all the heavy lifting" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Production-ready** images with proper layering" >> $GITHUB_STEP_SUMMARY