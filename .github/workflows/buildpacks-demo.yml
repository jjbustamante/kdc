name: 🚀 Buildpacks Multi-Architecture Demo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: jjbustamante/kdc

jobs:
  # Test locally first
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test bcrypt functionality
        run: |
          python -c "
          import bcrypt
          import platform
          print(f'✅ bcrypt working on {platform.machine()}')
          password = b'test_password'
          hashed = bcrypt.hashpw(password, bcrypt.gensalt())
          assert bcrypt.checkpw(password, hashed)
          print('✅ bcrypt hash/verify working correctly')
          "

      - name: Test Flask app
        run: |
          python app.py &
          APP_PID=$!
          sleep 3
          
          # Test endpoints
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/health || exit 1
          
          echo "✅ Flask app working correctly"
          kill $APP_PID

  # Build with buildpacks using matrix strategy
  build-multiarch:
    name: 🏗️ Build ${{ matrix.arch }} with Buildpacks
    runs-on: ${{ matrix.runner }}
    needs: test
    strategy:
      matrix:
        include:
          - arch: AMD64
            runner: ubuntu-latest
            docker_arch: amd64
            expected_arch: x86_64
          - arch: ARM64  
            runner: ubuntu-24.04-arm
            docker_arch: arm64
            expected_arch: aarch64
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.9.3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build with Buildpacks (${{ matrix.arch }})
        run: |
          pack build ${{ env.IMAGE_NAME }}:${{ matrix.docker_arch }} \
            --builder heroku/builder:24 \
            --publish

      - name: Test built image (${{ matrix.arch }})
        run: |
          docker run --rm -p 5000:5000 -d --name test-app-${{ matrix.docker_arch }} \
            ${{ env.IMAGE_NAME }}:${{ matrix.docker_arch }}
          
          sleep 5
          
          # Test that the app works and shows correct architecture
          response=$(curl -s http://localhost:5000/)
          echo "Response: $response"
          
          if echo "$response" | grep -q "${{ matrix.expected_arch }}"; then
            echo "✅ ${{ matrix.arch }} architecture detected correctly"
          else
            echo "❌ Architecture detection failed for ${{ matrix.arch }}"
            echo "Expected: ${{ matrix.expected_arch }}, Got: $response"
            exit 1
          fi
          
          # Test bcrypt functionality
          hash_response=$(curl -s -X POST http://localhost:5000/hash \
            -H "Content-Type: application/json" \
            -d '{"password": "test123"}')
          
          if echo "$hash_response" | grep -q "bcrypt_working.*true"; then
            echo "✅ bcrypt working in ${{ matrix.arch }} container"
          else
            echo "❌ bcrypt not working in ${{ matrix.arch }}"
            exit 1
          fi
          
          docker stop test-app-${{ matrix.docker_arch }}

      - name: Matrix build summary
        run: |
          echo "## 🚀 ${{ matrix.arch }} Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Image**: \`${{ env.IMAGE_NAME }}:${{ matrix.docker_arch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🏃 **Runner**: ${{ matrix.runner }}" >> $GITHUB_STEP_SUMMARY  
          echo "🏛️ **Architecture**: ${{ matrix.expected_arch }}" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **bcrypt**: Compiled natively for ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY

  # Create multi-arch manifest
  create-manifest:
    name: 📦 Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [build-multiarch]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create \
            ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:amd64 \
            ${{ env.IMAGE_NAME }}:arm64

          docker manifest annotate \
            ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:amd64 \
            --arch amd64

          docker manifest annotate \
            ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:arm64 \
            --arch arm64

          docker manifest push ${{ env.IMAGE_NAME }}:latest

  demo-summary:
    name: 📋 Demo Summary  
    runs-on: ubuntu-latest
    needs: [create-manifest]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Output demo summary
        run: |
          echo "## 🚀 Buildpacks Multi-Architecture Demo Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Successfully Built & Published:" >> $GITHUB_STEP_SUMMARY
          echo "✅ **AMD64 Image**: \`${{ env.IMAGE_NAME }}:amd64\` (ubuntu-latest)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **ARM64 Image**: \`${{ env.IMAGE_NAME }}:arm64\` (ubuntu-24.04-arm)" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Multi-Arch**: \`${{ env.IMAGE_NAME }}:latest\` (universal)" >> $GITHUB_STEP_SUMMARY
          echo "📱 **Available on**: [Docker Hub](https://hub.docker.com/r/jjbustamante/kdc)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔑 Key Benefits Demonstrated:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔥 **Zero Dockerfile complexity** for native dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Same pack command** works on both architectures" >> $GITHUB_STEP_SUMMARY  
          echo "- 🛠️ **Native bcrypt compilation** handled automatically" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Production-ready** images with optimized layering" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **True multi-arch** with matrix strategy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🆚 vs Traditional Dockerfile:" >> $GITHUB_STEP_SUMMARY
          echo "- **Dockerfile**: 50+ lines, architecture conditionals, complex setup" >> $GITHUB_STEP_SUMMARY
          echo "- **Buildpacks**: 1 command, automatic everything! ✨" >> $GITHUB_STEP_SUMMARY