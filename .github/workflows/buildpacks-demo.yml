name: 🚀 Buildpacks Multi-Architecture Demo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: jjbustamante/kdc

jobs:
  # Test locally first
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test bcrypt functionality
        run: |
          python -c "
          import bcrypt
          import platform
          print(f'✅ bcrypt working on {platform.machine()}')
          password = b'test_password'
          hashed = bcrypt.hashpw(password, bcrypt.gensalt())
          assert bcrypt.checkpw(password, hashed)
          print('✅ bcrypt hash/verify working correctly')
          "

      - name: Test Flask app
        run: |
          python app.py &
          APP_PID=$!
          sleep 3
          
          # Test endpoints
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/health || exit 1
          
          echo "✅ Flask app working correctly"
          kill $APP_PID

  # Build with buildpacks for AMD64
  build-amd64:
    name: 🏗️ Build AMD64 with Buildpacks
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.9.3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build with Buildpacks (AMD64)
        run: |
          pack build ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64 \
            --builder heroku/builder:24 \
            --publish

      - name: Test built image
        run: |
          docker run --rm -p 5000:5000 -d --name test-app \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64
          
          sleep 5
          
          # Test that the app works and shows correct architecture
          response=$(curl -s http://localhost:5000/)
          echo "Response: $response"
          
          if echo "$response" | grep -q "x86_64"; then
            echo "✅ AMD64 architecture detected correctly"
          else
            echo "❌ Architecture detection failed"
            exit 1
          fi
          
          # Test bcrypt functionality
          hash_response=$(curl -s -X POST http://localhost:5000/hash \
            -H "Content-Type: application/json" \
            -d '{"password": "test123"}')
          
          if echo "$hash_response" | grep -q "bcrypt_working.*true"; then
            echo "✅ bcrypt working in container"
          else
            echo "❌ bcrypt not working"
            exit 1
          fi
          
          docker stop test-app

  # Simulate ARM64 build (GitHub Actions doesn't have free ARM64 runners)
  simulate-arm64:
    name: 💭 ARM64 Build Simulation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Explain ARM64 building with Buildpacks
        run: |
          echo "## 🏗️ ARM64 Building with Buildpacks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### On actual ARM64 runner, the command would be:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pack build ${{ env.IMAGE_NAME }}:arm64 --builder heroku/builder:24 --publish" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ Buildpacks Magic:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Auto-detects** ARM64 architecture" >> $GITHUB_STEP_SUMMARY  
          echo "- 📦 **Downloads** ARM64 buildpack components" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Compiles** bcrypt natively for ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **Publishes** optimized ARM64 image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Result**: Same simple command, different architecture! 🎯" >> $GITHUB_STEP_SUMMARY

  # Create multi-arch manifest
  demo-summary:
    name: 📋 Demo Summary
    runs-on: ubuntu-latest
    needs: [build-amd64, simulate-arm64]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Output demo summary
        run: |
          echo "## 🚀 Buildpacks Multi-Architecture Demo Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Successfully Demonstrated:" >> $GITHUB_STEP_SUMMARY
          echo "✅ **AMD64 Image Built**: \`${{ env.IMAGE_NAME }}:amd64\` (real build)" >> $GITHUB_STEP_SUMMARY
          echo "💭 **ARM64 Concept**: Same command works on ARM64 runners" >> $GITHUB_STEP_SUMMARY
          echo "📱 **Available on Docker Hub**: [jjbustamante/kdc](https://hub.docker.com/r/jjbustamante/kdc)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔑 Key Benefits Demonstrated:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔥 **Zero Dockerfile complexity** for native dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Automatic bcrypt compilation** detected and handled" >> $GITHUB_STEP_SUMMARY  
          echo "- 🛠️ **One command** works across architectures" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Production-ready** images with optimized layering" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **CI/CD ready** with minimal configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🆚 vs Traditional Dockerfile:" >> $GITHUB_STEP_SUMMARY
          echo "- **Dockerfile**: 50+ lines, architecture conditionals, manual dependency management" >> $GITHUB_STEP_SUMMARY
          echo "- **Buildpacks**: 1 line, automatic everything! ✨" >> $GITHUB_STEP_SUMMARY